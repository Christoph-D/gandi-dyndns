#!/usr/bin/python

import xmlrpclib
import getopt
import sys
import urllib2

api = xmlrpclib.ServerProxy('https://rpc.gandi.net/xmlrpc/')

def main():
    apikey = ''
    domain = ''
    record = ''
    zoneversion = ''

    try:
        opts, args = getopt.getopt(sys.argv[1:], "ahrd", ["api=", "record=", "help", "domain="])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-a", "--api"):
            apikey = arg
        elif opt in ("-d", "--domain"):
            domain = arg
        elif opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-r", "--record"):
            record = arg

    if check_if_apikey_exists(apikey) == False:
        print ("Apikey " + apikey + " does not exist or is malformed")
        usage()
        sys.exit()

    if check_if_domain_exists(apikey, domain) == False:
        print ("Domain " + domain + " does not exist")
        usage()
        sys.exit()

    if check_if_record_exists(apikey, get_zoneid_by_domain(apikey, domain), record) == False:
        print ("A Record " + record + " does not exist, please create")
        usage()
        sys.exit()

    #api.domain.zone.record.delete(apikey, 
    #    get_zoneid_by_domain(apikey, domain),
    #    0,
    #    {"name": "test"})

    zone_version = api.domain.zone.version.new(apikey, get_zoneid_by_domain(apikey, domain))
    
    update_record(apikey, get_zoneid_by_domain(apikey, domain), zone_version, record, get_public_ip())

    # check_if_record_exists(apikey, domain_info(apikey, domain)['zone_id'], record)
    #zone_id = domain_info(apikey, domain)['zone_id']
    #print(zone_test(apikey, zone_id))

def usage():
    print("Usage: gandi-dyndns --api=APIKEY --domain=DOMAIN --record=RECORD")

def api_version(apikey):
    return api.version.info(apikey)

def zone_list(apikey):
    return api.domain.zone.list(apikey)

def zone_record_list(apikey, zone_id):
    return api.domain.zone.record.list(apikey, zone_id, 0)

def domain_info(apikey, domain):
    return api.domain.info(apikey, domain)

def get_zoneid_by_domain(apikey, domain):
    return domain_info(apikey, domain)['zone_id']

def get_public_ip():
    return urllib2.urlopen("http://automation.whatismyip.com/n09230945.asp").read()

def update_record(apikey, zone_id, zone_version, record, public_ip):
    delete_record(apikey, zone_id, zone_version, record)
    insert_record(apikey, zone_id, zone_version, record, public_ip)    

def delete_record(apikey, zone_id, zone_version, record):
    recordListOptions = {"name": record,
                         "type": "A"}

    records = api.domain.zone.record.delete(apikey, zone_id, zone_version, recordListOptions)

def insert_record(apikey, zone_id, zone_version, record, public_ip):
    zoneRecord = {"name": record, 
                  "ttl": 300, 
                  "type": "A", 
                  "value": public_ip}

    api.domain.zone.record.add(apikey, zone_id, zone_version, zoneRecord)

def check_if_domain_exists(apikey, domain):
    try:
        api.domain.info(apikey, domain)
        return True
    except xmlrpclib.Fault as err:
        return False

def check_if_apikey_exists(apikey):
    try:
        api_version(apikey)
        return True
    except xmlrpclib.Fault as err:
        return False

def check_if_record_exists(apikey, zone_id, record): 
    recordListOptions = {"name": record, 
                         "type": "A"}

    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        return True

    return False

if __name__ == "__main__":
    main()
